{"ast":null,"code":"import * as utils from \"../Utils\";\nexport const getAllPosts = async token => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/getAll`, {\n      method: \"GET\",\n      headers: {\n        jwt: token\n      }\n    });\n    let results = await response.json();\n    return results.data.posts;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const deletePost = async (token, post) => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/del/${post}`, {\n      method: \"DELETE\",\n      headers: {\n        jwt: token\n      }\n    });\n    await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const uploadPicture = async (token, file, desc, getUser) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"image\", file.files[0]);\n    formData.append(\"description\", desc);\n    formData.append(\"username\", getUser);\n    let response = await fetch(`${utils.backendRoute}/posts/upload`, {\n      method: \"POST\",\n      headers: {\n        jwt: token\n      },\n      body: formData\n    });\n    let result = await response.json();\n    return result;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const likePost = async (token, imageId) => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/like/${imageId}`, {\n      headers: {\n        jwt: token\n      }\n    });\n    await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const getProfilePosts = async (token, pName) => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/profile/${pName}`, {\n      method: \"GET\",\n      headers: {\n        jwt: token\n      }\n    });\n    let final = await response.json();\n    return {\n      posts: final.data,\n      tempName: pName\n    };\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/services/postsServices.js"],"names":["utils","getAllPosts","token","response","fetch","backendRoute","method","headers","jwt","results","json","data","posts","err","console","log","deletePost","post","uploadPicture","file","desc","getUser","formData","FormData","append","files","body","result","likePost","imageId","getProfilePosts","pName","final","tempName"],"mappings":"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","sourcesContent":["import * as utils from \"../Utils\";\n\nexport const getAllPosts = async (token) => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/getAll`, {\n      method: \"GET\",\n      headers: {\n        jwt: token,\n      },\n    });\n    let results = await response.json();\n    return results.data.posts;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deletePost = async (token, post) => {\n  try {\n    let response = await fetch(`${utils.backendRoute}/posts/del/${post}`, {\n      method: \"DELETE\",\n      headers: {\n        jwt: token,\n      },\n    });\n    await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const uploadPicture = async (token, file, desc, getUser) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"image\", file.files[0]);\n    formData.append(\"description\", desc);\n    formData.append(\"username\", getUser);\n\n    let response = await fetch(`${utils.backendRoute}/posts/upload`, {\n      method: \"POST\",\n      headers: {\n        jwt: token,\n      },\n      body: formData,\n    });\n\n    let result = await response.json();\n    return result;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const likePost = async (token, imageId) => {\n  try {\n    let response = await fetch(\n      `${utils.backendRoute}/posts/like/${imageId}`,\n      {\n        headers: {\n          jwt: token,\n        },\n      }\n    );\n    await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getProfilePosts = async (token, pName) => {\n  try {\n    let response = await fetch(\n      `${utils.backendRoute}/posts/profile/${pName}`,\n      {\n        method: \"GET\",\n        headers: {\n          jwt: token,\n        },\n      }\n    );\n    let final = await response.json();\n    return {\n      posts: final.data,\n      tempName: pName,\n    };\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}