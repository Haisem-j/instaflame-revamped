{"ast":null,"code":"var _jsxFileName = \"/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Register/RegisterContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport RegisterView from \"./RegisterView\";\nimport { authRegister } from \"../../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegisterContainer = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async event => {\n    event.preventDefault();\n    const user = {\n      username: username,\n      password: password,\n      email: email\n    };\n    event.target.reset();\n    authRegister(user).then(result => {\n      if (result.success) {\n        setIsSuccess(true);\n      } else {\n        setErrorMessage(result.msg);\n        setIsError(true);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RegisterView, {\n      mySubmitHandler: mySubmitHandler,\n      setUsername: setUsername,\n      setPassword: setPassword,\n      setEmail: setEmail,\n      isSuccess: isSuccess,\n      isError: isError,\n      errorMessage: errorMessage,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(RegisterContainer, \"Coe9Ofwd0N2etaoU6be17uCxois=\");\n\n_c = RegisterContainer;\nexport default RegisterContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterContainer\");","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Register/RegisterContainer.jsx"],"names":["useState","RegisterView","authRegister","RegisterContainer","username","setUsername","email","setEmail","password","setPassword","isSuccess","setIsSuccess","isError","setIsError","errorMessage","setErrorMessage","mySubmitHandler","event","preventDefault","user","target","reset","then","result","success","msg"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,0BAAD,CAAhD;;AAEA,QAAMgB,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,IAAI,GAAG;AACXf,MAAAA,QAAQ,EAAEA,QADC;AAEXI,MAAAA,QAAQ,EAAEA,QAFC;AAGXF,MAAAA,KAAK,EAAEA;AAHI,KAAb;AAKAW,IAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb;AAEAnB,IAAAA,YAAY,CAACiB,IAAD,CAAZ,CAAmBG,IAAnB,CAAyBC,MAAD,IAAY;AAClC,UAAIA,MAAM,CAACC,OAAX,EAAoB;AAClBb,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAFD,MAEO;AACLI,QAAAA,eAAe,CAACQ,MAAM,CAACE,GAAR,CAAf;AACAZ,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAPD;AAQD,GAlBD;;AAoBA,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,eAAe,EAAEG,eADnB;AAEE,MAAA,WAAW,EAAEX,WAFf;AAGE,MAAA,WAAW,EAAEI,WAHf;AAIE,MAAA,QAAQ,EAAEF,QAJZ;AAKE,MAAA,SAAS,EAAEG,SALb;AAME,MAAA,OAAO,EAAEE,OANX;AAOE,MAAA,YAAY,EAAEE,YAPhB;AAQE,MAAA,QAAQ,EAAEV;AARZ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD,CA1CD;;GAAMD,iB;;KAAAA,iB;AA4CN,eAAeA,iBAAf","sourcesContent":["import { useState } from \"react\";\n\nimport RegisterView from \"./RegisterView\";\n\nimport { authRegister } from \"../../services\";\n\nconst RegisterContainer = () => {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async (event) => {\n    event.preventDefault();\n\n    const user = {\n      username: username,\n      password: password,\n      email: email,\n    };\n    event.target.reset();\n\n    authRegister(user).then((result) => {\n      if (result.success) {\n        setIsSuccess(true);\n      } else {\n        setErrorMessage(result.msg);\n        setIsError(true);\n      }\n    });\n  };\n\n  return (\n    <>\n      <RegisterView\n        mySubmitHandler={mySubmitHandler}\n        setUsername={setUsername}\n        setPassword={setPassword}\n        setEmail={setEmail}\n        isSuccess={isSuccess}\n        isError={isError}\n        errorMessage={errorMessage}\n        username={username}\n      />\n    </>\n  );\n};\n\nexport default RegisterContainer;\n"]},"metadata":{},"sourceType":"module"}