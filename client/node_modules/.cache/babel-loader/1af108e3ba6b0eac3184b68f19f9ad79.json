{"ast":null,"code":"var _jsxFileName = \"/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/UploadPicture/UploadPictureContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport UploadPictureView from \"./UploadPictureView\";\nimport { useState } from \"react\";\nimport { isLoggedIn, loginToken } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport * as utils from \"../../Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UploadPictureContainer = ({\n  getUser,\n  setToken,\n  loginToken,\n  isLoggedIn\n}) => {\n  _s();\n\n  const [works, setWorks] = useState(false);\n  const [desc, setDesc] = useState(\"\");\n\n  const mySubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      let file = event.target.file;\n      const formData = new FormData();\n      formData.append(\"image\", file.files[0]);\n      formData.append(\"description\", desc);\n      formData.append(\"username\", getUser);\n      let response = await fetch(`${utils.backendRoute}/posts/upload`, {\n        method: \"POST\",\n        headers: {\n          jwt: setToken\n        },\n        body: formData\n      });\n      let result = await response.json();\n\n      if (result.msg === \"Token is expired\") {\n        loginToken(\"\");\n        isLoggedIn(false);\n      } else {\n        setWorks(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UploadPictureView, {\n      works: works,\n      setDesc: setDesc,\n      mySubmitHandler: mySubmitHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(UploadPictureContainer, \"R3quHBBnziNFkDM6Qap+yjTUJNU=\");\n\n_c = UploadPictureContainer;\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  isLoggedIn,\n  loginToken\n})(UploadPictureContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadPictureContainer\");","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/UploadPicture/UploadPictureContainer.jsx"],"names":["UploadPictureView","useState","isLoggedIn","loginToken","connect","utils","UploadPictureContainer","getUser","setToken","works","setWorks","desc","setDesc","mySubmitHandler","event","preventDefault","file","target","formData","FormData","append","files","response","fetch","backendRoute","method","headers","jwt","body","result","json","msg","err","console","log","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,eAAvC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;;;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBL,EAAAA,UAArB;AAAiCD,EAAAA;AAAjC,CAAD,KAAmD;AAAA;;AAChF,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMY,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAI;AACF,UAAIC,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAaD,IAAxB;AACA,YAAME,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAzB;AACAH,MAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BT,IAA/B;AACAO,MAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4Bb,OAA5B;AAEA,UAAIe,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAElB,KAAK,CAACmB,YAAa,eAAvB,EAAuC;AAC/DC,QAAAA,MAAM,EAAE,MADuD;AAE/DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,GAAG,EAAEnB;AADE,SAFsD;AAK/DoB,QAAAA,IAAI,EAAEV;AALyD,OAAvC,CAA1B;AAQA,UAAIW,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AACA,UAAID,MAAM,CAACE,GAAP,KAAe,kBAAnB,EAAuC;AACrC5B,QAAAA,UAAU,CAAC,EAAD,CAAV;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD,MAGO;AACLQ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAtBD,CAsBE,OAAOsB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GA3BD;;AA6BA,sBACE;AAAA,2BACE,QAAC,iBAAD;AAAmB,MAAA,KAAK,EAAEvB,KAA1B;AAAiC,MAAA,OAAO,EAAEG,OAA1C;AAAmD,MAAA,eAAe,EAAEC;AAApE;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAtCD;;GAAMP,sB;;KAAAA,sB;;AAwCN,MAAM6B,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAOA,KAAP;AACD,CAFH;;AAGE,eAAehC,OAAO,CAAC+B,eAAD,EAAkB;AACtCjC,EAAAA,UADsC;AAEtCC,EAAAA;AAFsC,CAAlB,CAAP,CAGZG,sBAHY,CAAf","sourcesContent":["import UploadPictureView from \"./UploadPictureView\";\n\nimport { useState } from \"react\";\nimport { isLoggedIn, loginToken } from \"../../actions\";\nimport { connect } from \"react-redux\";\n\nimport * as utils from \"../../Utils\";\n\nconst UploadPictureContainer = ({ getUser, setToken, loginToken, isLoggedIn }) => {\n  const [works, setWorks] = useState(false);\n  const [desc, setDesc] = useState(\"\");\n\n  const mySubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      let file = event.target.file;\n      const formData = new FormData();\n      formData.append(\"image\", file.files[0]);\n      formData.append(\"description\", desc);\n      formData.append(\"username\", getUser);\n\n      let response = await fetch(`${utils.backendRoute}/posts/upload`, {\n        method: \"POST\",\n        headers: {\n          jwt: setToken,\n        },\n        body: formData,\n      });\n\n      let result = await response.json();\n      if (result.msg === \"Token is expired\") {\n        loginToken(\"\");\n        isLoggedIn(false);\n      } else {\n        setWorks(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <UploadPictureView works={works} setDesc={setDesc} mySubmitHandler={mySubmitHandler}/>\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n    return state;\n  };\n  export default connect(mapStateToProps, {\n    isLoggedIn,\n    loginToken\n  })(UploadPictureContainer);\n  "]},"metadata":{},"sourceType":"module"}