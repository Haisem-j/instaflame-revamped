{"ast":null,"code":"var _jsxFileName = \"/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Login/LoginContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport LoginView from \"./LoginView\";\nimport { connect } from \"react-redux\";\nimport { isLoggedIn, loginToken, setUser } from \"../../actions\";\nimport * as utils from \"../../Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginContainer = ({\n  setUser,\n  loginToken,\n  isLoggedIn\n}) => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async event => {\n    event.preventDefault();\n    const user = {\n      username: username,\n      password: password\n    };\n    console.log(\"user here\");\n    console.log(user);\n\n    try {\n      let response = await fetch(`${utils.backendRoute}/auth/login`, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let result = await response.json();\n\n      if (result.success) {\n        props.setUser(user.username);\n        props.loginToken(result.data.token);\n        props.isLoggedIn(true);\n      } else {\n        props.setUser(user.username);\n        props.loginToken(result.data.token);\n        props.isLoggedIn(true);\n      }\n    } catch (err) {\n      setIsError(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LoginView, {\n      setUsername: setUsername,\n      setPassword: setPassword,\n      mySubmitHandler: mySubmitHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LoginContainer, \"L//XkVM4gP2Ck31ezJ8kbwnvQ4U=\");\n\n_c = LoginContainer;\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  isLoggedIn,\n  loginToken,\n  setUser\n})(LoginContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginContainer\");","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Login/LoginContainer.jsx"],"names":["useState","LoginView","connect","isLoggedIn","loginToken","setUser","utils","LoginContainer","username","setUsername","password","setPassword","isError","setIsError","errorMessage","setErrorMessage","mySubmitHandler","event","preventDefault","user","console","log","response","fetch","backendRoute","method","body","JSON","stringify","headers","result","json","success","props","data","token","err","mapStateToProps","state"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,QAAgD,eAAhD;AAEA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEF,EAAAA,OAAF;AAAWD,EAAAA,UAAX;AAAuBD,EAAAA;AAAvB,CAAD,KAAyC;AAAA;;AAC9D,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,0BAAD,CAAhD;;AAEA,QAAMgB,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAG;AACXX,MAAAA,QAAQ,EAAEA,QADC;AAEXE,MAAAA,QAAQ,EAAEA;AAFC,KAAb;AAIAU,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,QAAI;AACF,UAAIG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEjB,KAAK,CAACkB,YAAa,aAAvB,EAAqC;AAC7DC,QAAAA,MAAM,EAAE,MADqD;AAE7DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFuD;AAG7DU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHoD,OAArC,CAA1B;AAOA,UAAIC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;;AAEA,UAAID,MAAM,CAACE,OAAX,EAAoB;AAClBC,QAAAA,KAAK,CAAC5B,OAAN,CAAcc,IAAI,CAACX,QAAnB;AACAyB,QAAAA,KAAK,CAAC7B,UAAN,CAAiB0B,MAAM,CAACI,IAAP,CAAYC,KAA7B;AACAF,QAAAA,KAAK,CAAC9B,UAAN,CAAiB,IAAjB;AACD,OAJD,MAIO;AACL8B,QAAAA,KAAK,CAAC5B,OAAN,CAAcc,IAAI,CAACX,QAAnB;AACAyB,QAAAA,KAAK,CAAC7B,UAAN,CAAiB0B,MAAM,CAACI,IAAP,CAAYC,KAA7B;AACAF,QAAAA,KAAK,CAAC9B,UAAN,CAAiB,IAAjB;AACD;AACF,KAnBD,CAmBE,OAAOiC,GAAP,EAAY;AACZvB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GA/BD;;AAgCA,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,WAAW,EAAEJ,WADf;AAEE,MAAA,WAAW,EAAEE,WAFf;AAGE,MAAA,eAAe,EAAEK;AAHnB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD,CA/CD;;GAAMT,c;;KAAAA,c;;AAiDN,MAAM8B,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAOA,KAAP;AACD,CAFD;;AAIA,eAAepC,OAAO,CAACmC,eAAD,EAAkB;AACtClC,EAAAA,UADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA;AAHsC,CAAlB,CAAP,CAIZE,cAJY,CAAf","sourcesContent":["import { useState } from \"react\";\n\nimport LoginView from \"./LoginView\";\n\nimport { connect } from \"react-redux\";\nimport { isLoggedIn, loginToken, setUser } from \"../../actions\";\n\nimport * as utils from \"../../Utils\";\n\nconst LoginContainer = ({ setUser, loginToken, isLoggedIn }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async (event) => {\n    event.preventDefault();\n    const user = {\n      username: username,\n      password: password,\n    };\n    console.log(\"user here\");\n    console.log(user);\n\n    try {\n      let response = await fetch(`${utils.backendRoute}/auth/login`, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      let result = await response.json();\n\n      if (result.success) {\n        props.setUser(user.username);\n        props.loginToken(result.data.token);\n        props.isLoggedIn(true);\n      } else {\n        props.setUser(user.username);\n        props.loginToken(result.data.token);\n        props.isLoggedIn(true);\n      }\n    } catch (err) {\n      setIsError(true);\n    }\n  };\n  return (\n    <>\n      <LoginView\n        setUsername={setUsername}\n        setPassword={setPassword}\n        mySubmitHandler={mySubmitHandler}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  isLoggedIn,\n  loginToken,\n  setUser,\n})(LoginContainer);\n"]},"metadata":{},"sourceType":"module"}