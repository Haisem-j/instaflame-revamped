{"ast":null,"code":"var _jsxFileName = \"/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Login/LoginContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport LoginView from \"./LoginView\";\nimport { connect } from \"react-redux\";\nimport { isLoggedIn, loginToken, setUser } from \"../../actions\";\nimport * as utils from \"../../Utils\";\nimport { authLogin } from \"../../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginContainer = ({\n  setUser,\n  loginToken,\n  isLoggedIn\n}) => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async event => {\n    event.preventDefault();\n    const user = {\n      username: username,\n      password: password\n    };\n    console.log(\"user here\");\n    console.log(user);\n    authLogin(user).then(result => {\n      if (result.success) {\n        setUser(user.username);\n        loginToken(result.data.token);\n        isLoggedIn(true);\n      } else {\n        setErrorMessage(result.msg);\n        setIsError(true);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LoginView, {\n      setUsername: setUsername,\n      setPassword: setPassword,\n      mySubmitHandler: mySubmitHandler,\n      isError: isError,\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LoginContainer, \"L//XkVM4gP2Ck31ezJ8kbwnvQ4U=\");\n\n_c = LoginContainer;\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  isLoggedIn,\n  loginToken,\n  setUser\n})(LoginContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginContainer\");","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Login/LoginContainer.jsx"],"names":["useState","LoginView","connect","isLoggedIn","loginToken","setUser","utils","authLogin","LoginContainer","username","setUsername","password","setPassword","isError","setIsError","errorMessage","setErrorMessage","mySubmitHandler","event","preventDefault","user","console","log","then","result","success","data","token","msg","mapStateToProps","state"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,QAAgD,eAAhD;AAEA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEH,EAAAA,OAAF;AAAWD,EAAAA,UAAX;AAAuBD,EAAAA;AAAvB,CAAD,KAAyC;AAAA;;AAC9D,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,0BAAD,CAAhD;;AAEA,QAAMiB,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAG;AACXX,MAAAA,QAAQ,EAAEA,QADC;AAEXE,MAAAA,QAAQ,EAAEA;AAFC,KAAb;AAIAU,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAb,IAAAA,SAAS,CAACa,IAAD,CAAT,CAAgBG,IAAhB,CAAsBC,MAAD,IAAY;AAC/B,UAAIA,MAAM,CAACC,OAAX,EAAoB;AAClBpB,QAAAA,OAAO,CAACe,IAAI,CAACX,QAAN,CAAP;AACAL,QAAAA,UAAU,CAACoB,MAAM,CAACE,IAAP,CAAYC,KAAb,CAAV;AACAxB,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAJD,MAIO;AACLa,QAAAA,eAAe,CAACQ,MAAM,CAACI,GAAR,CAAf;AACAd,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KATD;AAUD,GAlBD;;AAmBA,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,WAAW,EAAEJ,WADf;AAEE,MAAA,WAAW,EAAEE,WAFf;AAGE,MAAA,eAAe,EAAEK,eAHnB;AAIE,MAAA,OAAO,EAAEJ,OAJX;AAKE,MAAA,YAAY,EAAEE;AALhB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAWD,CApCD;;GAAMP,c;;KAAAA,c;;AAsCN,MAAMqB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAOA,KAAP;AACD,CAFD;;AAIA,eAAe5B,OAAO,CAAC2B,eAAD,EAAkB;AACtC1B,EAAAA,UADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA;AAHsC,CAAlB,CAAP,CAIZG,cAJY,CAAf","sourcesContent":["import { useState } from \"react\";\n\nimport LoginView from \"./LoginView\";\n\nimport { connect } from \"react-redux\";\nimport { isLoggedIn, loginToken, setUser } from \"../../actions\";\n\nimport * as utils from \"../../Utils\";\nimport { authLogin } from \"../../services\";\n\nconst LoginContainer = ({ setUser, loginToken, isLoggedIn }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"Something went wrong....\");\n\n  const mySubmitHandler = async (event) => {\n    event.preventDefault();\n    const user = {\n      username: username,\n      password: password,\n    };\n    console.log(\"user here\");\n    console.log(user);\n    authLogin(user).then((result) => {\n      if (result.success) {\n        setUser(user.username);\n        loginToken(result.data.token);\n        isLoggedIn(true);\n      } else {\n        setErrorMessage(result.msg);\n        setIsError(true);\n      }\n    });\n  };\n  return (\n    <>\n      <LoginView\n        setUsername={setUsername}\n        setPassword={setPassword}\n        mySubmitHandler={mySubmitHandler}\n        isError={isError}\n        errorMessage={errorMessage}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  isLoggedIn,\n  loginToken,\n  setUser,\n})(LoginContainer);\n"]},"metadata":{},"sourceType":"module"}