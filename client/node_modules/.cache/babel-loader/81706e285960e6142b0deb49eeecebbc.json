{"ast":null,"code":"var _jsxFileName = \"/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Profile/ProfileContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport ProfileView from \"./ProfileView\";\nimport { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as utils from \"../../Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProfileContainer = ({\n  location,\n  setToken\n}) => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        let tempName = location.pathname.split(\"/\");\n        let response = await fetch(`${utils.backendRoute}/posts/profile/${tempName[2]}`, {\n          method: \"GET\",\n          headers: {\n            jwt: setToken\n          }\n        });\n        let final = await response.json();\n        return {\n          posts: final.data,\n          tempName: tempName[2]\n        };\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getPosts().then(res => {\n      setName(res.tempName);\n      setPosts(res.posts);\n    });\n  }, [location.pathname, setToken]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ProfileView, {\n      posts: posts,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ProfileContainer, \"kbRoXCs3l+EGEknYG2YIc8Rl02k=\");\n\n_c = ProfileContainer;\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, null)(ProfileContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileContainer\");","map":{"version":3,"sources":["/Users/haisemjemal/Desktop/instaflame-revamped/client/src/pages/Profile/ProfileContainer.jsx"],"names":["ProfileView","useState","useEffect","connect","utils","ProfileContainer","location","setToken","name","setName","posts","setPosts","getPosts","tempName","pathname","split","response","fetch","backendRoute","method","headers","jwt","final","json","data","err","console","log","then","res","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AAAA;;AACnD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAG,YAAY;AAC3B,UAAI;AACF,YAAIC,QAAQ,GAAGP,QAAQ,CAACQ,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,CAAf;AACA,YAAIC,QAAQ,GAAG,MAAMC,KAAK,CACvB,GAAEb,KAAK,CAACc,YAAa,kBAAiBL,QAAQ,CAAC,CAAD,CAAI,EAD3B,EAExB;AACEM,UAAAA,MAAM,EAAE,KADV;AAEEC,UAAAA,OAAO,EAAE;AACPC,YAAAA,GAAG,EAAEd;AADE;AAFX,SAFwB,CAA1B;AASA,YAAIe,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAlB;AACA,eAAO;AACLb,UAAAA,KAAK,EAAEY,KAAK,CAACE,IADR;AAELX,UAAAA,QAAQ,EAAEA,QAAQ,CAAC,CAAD;AAFb,SAAP;AAID,OAhBD,CAgBE,OAAOY,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KApBD;;AAqBAb,IAAAA,QAAQ,GAAGgB,IAAX,CAAiBC,GAAD,IAAS;AACvBpB,MAAAA,OAAO,CAACoB,GAAG,CAAChB,QAAL,CAAP;AACAF,MAAAA,QAAQ,CAACkB,GAAG,CAACnB,KAAL,CAAR;AACD,KAHD;AAID,GA1BQ,EA0BN,CAACJ,QAAQ,CAACQ,QAAV,EAAoBP,QAApB,CA1BM,CAAT;AA2BA,sBACE;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEG,KAApB;AAA2B,MAAA,IAAI,EAAEF;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CApCD;;GAAMH,gB;;KAAAA,gB;;AAsCN,MAAMyB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAOA,KAAP;AACD,CAFD;;AAGA,eAAe5B,OAAO,CAAC2B,eAAD,EAAkB,IAAlB,CAAP,CAA+BzB,gBAA/B,CAAf","sourcesContent":["import ProfileView from \"./ProfileView\";\n\nimport { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport * as utils from \"../../Utils\";\n\nconst ProfileContainer = ({ location, setToken }) => {\n  const [name, setName] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        let tempName = location.pathname.split(\"/\");\n        let response = await fetch(\n          `${utils.backendRoute}/posts/profile/${tempName[2]}`,\n          {\n            method: \"GET\",\n            headers: {\n              jwt: setToken,\n            },\n          }\n        );\n        let final = await response.json();\n        return {\n          posts: final.data,\n          tempName: tempName[2],\n        };\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getPosts().then((res) => {\n      setName(res.tempName);\n      setPosts(res.posts);\n    });\n  }, [location.pathname, setToken]);\n  return (\n    <>\n      <ProfileView posts={posts} name={name}/>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return state;\n};\nexport default connect(mapStateToProps, null)(ProfileContainer);\n"]},"metadata":{},"sourceType":"module"}